[user]
    name = Brandon W Maister

[alias]
    # ==== General commit properties and actions
    st = status
    s = status --short
    ix = diff --cached
    ci = commit
    co = checkout
    f = commit --amend --no-edit
    if = instafix
    fu = !"git add -u && git f"
    uf = !"git add -u && git instafix"

    # ==== Repo properties
    root = rev-parse --show-toplevel
    # definitely more reliable, but probably not worth it, default branches don't change very often
    # default-branch = !"git ls-remote --symref origin HEAD | awk -F'[/\t]' 'NR == 1 {print $3}'"
    # To the default branch after it's been changed run `git remote set-head origin --auto`
    default-branch = !"git symbolic-ref refs/remotes/origin/HEAD | sed 's,^refs/remotes/origin/,,'"

    # ==== Interactions with the default branch
    # make sure local copy of default branch is up to date
    #
    # If the remote default branch is not named `main` sometimes I make my
    # local default branch be main, so check for main first
    sync = !"if (git rev-parse --verify main >/dev/null 2>&1) ; then export local=main ; else export local=$(git default-branch) ; fi ; export remote=$(git default-branch) ; export current=$(git branch --show-current); if [ "$current" = "$local" ] ; then git pull ; else git fetch origin ${remote}:${local} ; fi ; (git fetch origin >/dev/null 2>&1 &)"
    syncm = !"git sync && git rebase -i main"

    dgb = !"git branch --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" { print $1 }' | xargs -r git branch -D"
    su = !"git sync && git rebase origin/main"
    cleanup = !"git rebase -i $(git merge-base @ origin/$(git default-branch))"
    publish = !"git push -u origin $(git rev-parse --abbrev-ref HEAD)"

    # ==== Logging
    # Basic format for all log calls
    # (nb aliases aren't allowed to have underscores)
    lg-base = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit
    lg-exclude-prs = lg-base --decorate-refs-exclude='refs/pullreqs/*'

    # log commands
    lg = lg-exclude-prs
    lgn = lg-exclude-prs --no-merges
    lga = lg --branches=*
    lgaa = lga --remotes=*
    # log short -- only 15 commits
    lgs = lg -15
    lgsa = lga -15
    lgsaa = lgaa -15
    # log with prs
    lgp = lg-base
    lgps = lg-base -15
    lgpa = lgp --branches=* --remotes=*

    # highlight branches
    tree-base = lga --simplify-by-decoration --decorate-refs-exclude='refs/pullreqs/*' --decorate-refs-exclude='refs/tags/*'
    tree = tree-base --decorate-refs-exclude='refs/remotes/*/*'

    # ==== unmerged branches
    bt = !"git tree-base --color=always | grep -Ev $( git branch --all --merged  | sed -E -e 's/ //g' -e '/^\\*/d' | tr '\n' '|' | sed -E 's/(\\|$|^\\|)//g' ) | less -XRF"
    branchfiles = !"git diff --name-only @ $(git merge-base @ main)"
    mergedfiles = !"git diff --name-only HEAD^2 $(git merge-base HEAD^2 HEAD^ )"
    which-pr = describe --all --contains
    pushf = push --force-with-lease

    # ==== submodules
    sdiff = !git diff && git submodule foreach 'git diff'
    spush = push --recurse-submodules=on-demand
    supdate = submodule update --remote --merge

[help]
    autocorrect = 1

[core]
    editor = vim
    pager = delta
    # speed up detection of changes
    fsmonitor = true
    # speed up untracked files
    untrackedCache = true
    # speed up log
    commitgraph = true

[include]
    path = ~/.gitconfig_local

{{ if lookPath "gh" -}}
[credential "https://github.com"]
	helper = !gh auth git-credential
[credential "https://gist.github.com"]
	helper = !gh auth git-credential
{{- end }}

[interactive]
    diffFilter = delta --color-only --side-by-side

[push]
    default = simple
    # see also on-demand as an option
    # https://git-scm.com/book/en/v2/Git-Tools-Submodules#_publishing_submodules
    recurseSubmodules = check

[fetch]
    prune = true
    # double check that data is valid on fetch
    # TODO: did these fsckobjects slow a bunch of things down dramatically?
    # fsckobjects = true
    # speed up history on fetched items
    writeCommitGraph = true

[transfer]
    # double check that we don't push invalid objects
    #fsckobjects = true
[receive]
    # double check that data is valid when pushed here
    #fsckObjects = true

[index]
    # skipHash (turned on by manyfiles) causes git-absorb and git-instafix to
    # break https://github.com/tummychow/git-absorb/issues/81
    # https://github.com/libgit2/libgit2/issues/6531
    skipHash = false

[diff]
    algorithm = histogram
    colorMoved = zebra
    indentHeuristic = true
    submodule = log

[merge]
    conflictstyle = zdiff3

[rebase]
    autosquash = true
    autoStash = true
    updateRefs = true

[rerere]
    enabled = true

[pull]
    rebase = true

[color]
    ui = true

[color "status"]
    added = green
    changed = yellow
    untracked = red

[github]
    user = quodlibetor

[submodule]
    recurse = true

[remote "origin"]
    prune = true

[init]
    defaultBranch = main
    templateDir = ~/.config/git/hook-templates

[delta]
    side-by-side = true
    navigate = true
    syntax-theme = Visual Studio Dark+

[advice]
    detachedHead = false
    skippedCherryPicks = false

[status]
    submodulesummary = 1

[safe]
    directory = /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core
