#!/usr/bin/env zsh

typeset -U PATH
export path=(
    "$HOME/.local/clang/bin"
    "$HOME/.local/bin"
    "$HOME/.cargo/bin"
    /opt/homebrew/bin
    $path
    /usr/local/bin
    /usr/local/sbin
    /opt/homebrew/sbin
)
# workaround for some things, I don't remember what so leave it disabled until something breaks
# for bindir in /opt/homebrew/opt/*/bin ; do
#     export PATH="$PATH:${bindir}"
# done

# mise works like asdf but doesn't use shims. it provides shims for ide
# integration if necessary.
MISE_SHIMDIR="$HOME"/.local/share/mise/shims
if [[ -d "$MISE_SHIMDIR" ]]; then
    path+=("$MISE_SHIMDIR")
fi
# needs to be at the end because commandlinetools overwrites the llvm that cargo wants, I think
CLT_BIN=/Library/Developer/CommandLineTools/usr/bin
[[ -d $CLT_BIN ]] && export PATH="$PATH:$CLT_BIN"

# go doesn't work on modern macos without this
export CGO_CPPFLAGS="-Wno-error -Wno-nullability-completeness -Wno-expansion-to-defined"
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

if [[ -d $HOME/.local/share/man ]] ; then
    export MANPATH="$HOME/.local/share/man:$MANPATH"
fi
if (( $+commands[fwd-browse] )) && [[ $(uname -s) != Darwin && -z $BROWSER ]]; then
    export BROWSER=fwd-browse
fi

if [[ -n $JUST_WANT_PATH ]] ; then
    return
fi

HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000
setopt extendedglob notify
unsetopt nomatch
bindkey -e

# COMPINSTALL
zstyle :compinstall filename '/Users/bwm/.zshrc'

if (( $+commands[brew] )) ; then
    BREW_PREFIX=$(brew --prefix)
    [ -d ${BREW_PREFIX}/share/zsh/site-functions ] && fpath+=(${BREW_PREFIX}/share/zsh/site-functions)
fi

fpath=($fpath $HOME/.local/zsh-completions $HOME/.zplugin/completions)
autoload -Uz compinit
autoload -U bashcompinit
compinit
# End of lines added by compinstall

# Open current command line in vim
autoload edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# autoload -U insert-last-word
# zle -N insert-last-word
# bindkey '^[.' insert-last-word

autoload -U copy-earlier-word
zle -N copy-earlier-word
bindkey '^[,' copy-earlier-word

### Added by Zinit's installer
# https://github.com/zdharma-continuum/zinit
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
source "${ZINIT_HOME}/zinit.zsh"

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

zinit light zdharma/fast-syntax-highlighting
# TAB COMPLETIONS
zinit ice wait"0b" lucid blockf
zinit light zsh-users/zsh-completions
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select=2
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '-- %d --'
zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:complete:*:options' sort false
#zstyle ':fzf-tab:complete:_zlua:*' query-string input
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
#zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions

zinit ice wait lucid
zinit snippet OMZ::lib/completion.zsh

zinit ice as"completion"
zinit snippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker

zinit ice wait lucid
zinit load 'wfxr/forgit'

# history
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data
# duplicate detection
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_all_dups   # Delete old recorded entry if new entry is a duplicate

######################################################################
# Extra commands

(( $+commands[mise] )) && eval "$(mise activate zsh)"
(( $+commands[starship] )) && eval "$(starship init zsh)"
(( $+commands[zoxide] )) && eval "$(zoxide init --cmd j zsh)"

if (( $+commands[fzf] )) ; then
    eval "$(fzf --zsh)"
    export FZF_DEFAULT_COMMAND='fd'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND="fd --type directory"
fi

(( $+commands[eza] )) && alias -r ls=eza
if (( $+commands[nvim] )); then
    alias -r vim=nvim
    export EDITOR=nvim
else
    export EDITOR=vim
fi
alias -r aplay="ansible-playbook"
alias -r cm=chezmoi
alias -r dc="docker compose"
alias -r dsa='docker stop $(docker ps -q)' # docker stop all
alias -r e='emacsclient --no-wait --socket-name="${HOME}/.emacs.d/server/server"'
alias -r et='emacsclient --tty --socket-name="${HOME}/.emacs.d/server/server"'
alias -r grep="grep --color=auto"
alias -r la="ls -la"
alias -r ll="ls -l"
alias -r lzd='lazydocker'
alias -r lzg='lazygit'
alias -r rg="rg --type-add 'tilt:*.tilt' --type-add 'tilt:Tiltfile'"
alias -r tf=terraform

# Set the the built-in time format to be more like bash, with some goodies.
export TIMEFMT='
real	%E
user	%U
sys	%S
%%cpu	%P
maxmem	%M KB
faults	%F'
export TIME="$TIMEFMT"

[[ -f $HOME/.wezterm.sh && $TERM == wezterm ]] && source "$HOME/.wezterm.sh"

REPO_DIR="$HOME/repos"

psgrep() {
    ps -eo 'pid ppid %cpu %mem etime args' | rg --color=always "(PID|$1)" | rg -v -w "rg"
}

# github clone
ghc() {
    (
        cd "$REPO_DIR" || return 1
        git clone "$1"
    )
    local bn="${1##*/}"
    bn="${bn%%.*}"
    # show where it was cloned and put `cd $clonedir` in the clipboard
    echo
    echo "$REPO_DIR/${bn}" | tee >( echo -n "cd $(cat -)" | tr -d $'\n' | pbcopy)
}
ssm() {
    local fields="${GOSSM_FIELDS:-name,launch-time,id}"
    gossm start --region us-east-2 --fields "$fields" "$@"
}
aws_token() {
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
    username="${1?username is required}" && shift
    token="${1?MFA token is required}" && shift
    profile="${1}" && [[ "$#" -gt 1 ]] && shift
    args=()
    if [[ -n "$profile" ]]; then
        args=(--profile "${profile}")
    fi
    eval "$(\
        aws sts \
            "${args[@]}" \
            get-session-token \
            --token-code "$token" \
            --serial-number "arn:aws:iam::934458803771:mfa/${username}" \
            | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=" + (.AccessKeyId) + "\nexport AWS_SECRET_ACCESS_KEY=" + (.SecretAccessKey) + "\nexport AWS_SESSION_TOKEN=" + (.SessionToken)'
   )"
}

# list all mounted volumes
docker-mounts() {
    if [[ -n $1 ]]; then
        containers=($(docker ps | awk "/$1/ { print \$1 }"))
    else
        containers=($(docker ps -q))
    fi
    docker inspect \
           -f '{{ .Name }}{{ range .Mounts }}{{ printf "\n\t" }}{{ .Type }} {{ if eq .Type "bind" }}{{ .Source }}{{ end }}{{ .Name }} => {{ .Destination }}{{ end }}' \
           "${containers[@]}" \
           ;
}

drun() {
    local usage="usage: drun IMAGE_NAME [COMMAND...]"
    if [[ $# -eq 0  ]]; then
        echo "$usage"
        return 1
    elif [[ "$*" =~ -h ]]; then
        echo -n "$usage

Run a docker image with the current directory mounted in the working dir
"
        return 0
    fi

    image_name=$1 && shift
    if [[ $# -gt 0 ]]; then
        command=("$@")
    else
        command=(bash)
    fi
    docker run -it --rm -v "$(pwd):/work" -w /work $image_name "${command[@]}"
}

dimgexec() {
    local usage="usage: dexec IMAGE_NAME [COMMAND...]"
    if [[ $# -eq 0  ]]; then
        echo "$usage"
        return 1
    elif [[ "$*" =~ -h ]]; then
        echo -n "$usage

Execute into a running docker container
"
        return 0
    fi

    image_name=$1 && shift
    if [[ $# -gt 0 ]]; then
        command=("$@")
    else
        command=(bash)
    fi

    container_id=$(docker ps | awk "/$image_name/ "'{ print $1 }')
    docker exec -it "$container_id" "${command[@]}"
}

function frg {
    result=$(
        rg --ignore-case --color=always --line-number --no-heading "$@" |
            fzf --ansi \
                --color 'hl:-1:underline,hl+:-1:underline:reverse' \
                --delimiter ':' \
                --preview "bat --color=always {1} --theme='Solarized (light)' --highlight-line {2}" \
                --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
    )
    file=${result%%:*}
    linenumber=$(echo "${result}" | cut -d: -f2)
    if [[ -n "$file" ]]; then
        $EDITOR +"${linenumber}" "$file"
    fi
}

# Vterm stuff, tells emacs which directory we're currently in
vterm_printf() {
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

if [[ -f /usr/local/bin/lesspipe.sh ]]; then
    export LESSOPEN='|/usr/local/bin/lesspipe.sh %s' LESS_ADVANCED_PREPROCESSOR=1
elif [[ -f /opt/homebrew/bin/lesspipe.sh ]]; then
    export LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s" LESS_ADVANCED_PREPROCESSOR=1
fi

#[ -f ~/.inshellisense/key-bindings.zsh ] && source ~/.inshellisense/key-bindings.zsh
export GIT_INSTAFIX_UPSTREAM=main

# anything that should be set only on this computer
[[ -f $HOME/.zshrc-local ]] && source "$HOME/.zshrc-local"
