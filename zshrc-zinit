#!/usr/bin/env zsh

# Lines configured by zsh-newuser-install
typeset -U PATH
export PATH="$HOME/.local/clang/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/go/bin:$PATH:/usr/local/bin:/usr/local/sbin:/opt/homebrew/opt/libpq/bin"
for bindir in /opt/homebrew/opt/*/bin ; do
    export PATH="$PATH:${bindir}"
done
if [[ -n $JUST_WANT_PATH ]] ; then
    return
fi
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000
setopt extendedglob notify
unsetopt nomatch
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/Users/bwm/.zshrc'

fpath=($fpath $HOME/.local/zsh-completions $HOME/.zplugin/completions)
autoload -Uz compinit
autoload -U bashcompinit
compinit
# End of lines added by compinstall

# I should probably figure out how to make this work the same as all the other compdefs
#compdef _pastel pastel

#export PATH="/Users/bwm/Library/Python/3.8/bin:/Users/bwm/Library/Python/3.7/bin:$PATH"
# commandlinetools overwrites the llvm that cargo wants, I think
export PATH="$PATH:/Library/Developer/CommandLineTools/usr/bin"
export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX11.3.sdk

# Open current command line in vim
autoload edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# autoload -U insert-last-word
# zle -N insert-last-word
# bindkey '^[.' insert-last-word

autoload -U copy-earlier-word
zle -N copy-earlier-word
bindkey '^[,' copy-earlier-word

### Added by Zinit's installer
# https://github.com/zdharma-continuum/zinit
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
source "${ZINIT_HOME}/zinit.zsh"

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

zinit as"null" wait"2" lucid from"gh-r" for \
    mv"exa* -> exa" sbin       ogham/exa

zinit light zdharma/fast-syntax-highlighting
# TAB COMPLETIONS
zinit ice wait"0b" lucid blockf
zinit light zsh-users/zsh-completions
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select=2
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '-- %d --'
zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:complete:*:options' sort false
#zstyle ':fzf-tab:complete:_zlua:*' query-string input
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
#zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions

# Install zoxide from the container registry, and then its plugin
# Install it as j instead of z
zinit ice wait"2" as"command" from"gh-r" lucid \
  mv"zoxide*/zoxide -> zoxide" \
  atclone"./zoxide init --cmd j zsh > init.zsh" \
  atpull"%atclone" src"init.zsh" nocompile'!'
zinit light ajeetdsouza/zoxide

zinit ice wait lucid
zinit snippet OMZ::lib/completion.zsh

zinit ice as"completion"
zinit snippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker

zinit ice as"completion" lucid
zinit ice pick'jwilm/alacritty/extra/completions/_alacritty'
zinit ice svn wait'0' lucid
zinit snippet PZT::modules/python
zinit ice wait'0' atload'__zplg_async_run' lucid

zinit ice wait lucid
zinit load 'wfxr/forgit'

# install the httpie-equivalent xh, aliased to 'http'
zinit as"null" wait"2" lucid from"gh-r" for \
    light-mode mv"xh*/xh -> xh" sbin"xh -> http" atinit"zinit creinstall -Q ducaale/xh" ducaale/xh

if [[ -f /usr/local/opt/asdf/libexec/asdf.sh ]]; then
    source /usr/local/opt/asdf/libexec/asdf.sh
fi

command -v starship >/dev/null && eval "$(starship init zsh)"

alias -r ls=exa
alias -r ll="ls -l"
alias -r la="ls -la"
alias -r grep="grep --color=auto"
alias -r bg="batgrep"
alias -r e="emacsclient --no-wait --socket-name=${HOME}/.emacs.d/server/server"
setup_emacs_terminfo_kitty() {
    # source https://www.gnu.org/software/emacs/manual/html_node/efaq/Colors-on-a-TTY.html
    tic -x -o ~/.terminfo <( cat <<EOF
    xterm-emacs|xterm with 24-bit direct color mode for Emacs,
  use=xterm-256color,
  setb24=\E[48\:2\:\:%p1%{65536}%/%d\:%p1%{256}%/%{255}%&\
     %d\:%p1%{255}%&%dm,
  setf24=\E[38\:2\:\:%p1%{65536}%/%d\:%p1%{256}%/%{255}%&\
     %d\:%p1%{255}%&%dm,
EOF
)
}
et() {
    if [[ -n "$KITTY_WINDOW_ID" ]]; then
        TERM=xterm-emacs emacsclient --tty --socket-name=${HOME}/.emacs.d/server/server "$@"
    else
        emacsclient --tty --socket-name=${HOME}/.emacs.d/server/server "$@"
    fi
}
alias -r rg="rg --smart-case"
alias -r dc="docker compose"

export EDITOR=vim

psgrep() {
    ps -eo 'pid ppid %cpu %mem etime args' | rg --color=always "(PID|$1)" | rg -v -w "rg"
}

# github clone
REPO_DIR="$HOME/repos"
ghc() {
    (
        cd "$REPO_DIR" || return 1
        git clone "$1"
    )
    local bn="${1##*/}"
    bn="${bn%%.*}"
    # show where it was cloned and put `cd $clonedir` in the clipboard
    echo
    echo "$REPO_DIR/${bn}" | tee >( echo -n "cd $(cat -)" | tr -d $'\n' | pbcopy)
}

#export RUSTC_WRAPPER=/Users/bwm/.cargo/bin/sccache

export GOPATH=$HOME/go
export GOROOT=/usr/local/opt/go/libexec
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='fd'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# history
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data
# duplicate detection
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_all_dups   # Delete old recorded entry if new entry is a duplicate
setopt hist_save_no_dups      # Don't write duplicate entries in the history file

# see /Users/bwm/Library/Preferences/org.dystroy.broot/conf.toml for broot config
[[ -f "$HOME/.local.sh" ]] && source "$HOME/.local.sh"

alias -r lzd='lazydocker'
alias -r lzg='lazygit'
alias -r vim=nvim
alias -r tf=terraform
alias -r aplay="ansible-playbook"
# docker stop all
alias dsa='docker stop $(docker ps -q)'
ssm() {
    local fields="${GOSSM_FIELDS:-name,launch-time,id}"
    gossm start --region us-east-2 --fields "$fields" "$@"
}
aws_token() {
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
    username="${1?username is required}" && shift
    token="${1?MFA token is required}" && shift
    profile="${1}" && [[ "$#" -gt 1 ]] && shift
    args=()
    if [[ -n "$profile" ]]; then
        args=(--profile "${profile}")
    fi
    eval $(\
        aws sts \
            "${args[@]}" \
            get-session-token \
            --token-code "$token" \
            --serial-number "arn:aws:iam::934458803771:mfa/${username}" \
            | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=" + (.AccessKeyId) + "\nexport AWS_SECRET_ACCESS_KEY=" + (.SecretAccessKey) + "\nexport AWS_SESSION_TOKEN=" + (.SessionToken)'
   )
}

# list all mounted volumes
docker-mounts() {
    if [[ -n $1 ]]; then
        containers=($(docker ps | awk "/$1/ { print \$1 }"))
    else
        containers=($(docker ps -q))
    fi
    docker inspect \
           -f '{{ .Name }}{{ range .Mounts }}{{ printf "\n\t" }}{{ .Type }} {{ if eq .Type "bind" }}{{ .Source }}{{ end }}{{ .Name }} => {{ .Destination }}{{ end }}' \
           "${containers[@]}" \
           ;
}

# Set the the built-in time format to be more like bash, with some goodies.
export TIMEFMT='
real	%E
user	%U
sys	%S
%%cpu	%P
maxmem	%M KB
faults	%F'
export TIME="$TIMEFMT"

ussh() {
    ip="$1" && shift
    ssh "$@" ubuntu@"$ip"
}

shortcut_issues() {
    shortcut_user=bwm

    mode=${1:-dev}
    case $mode in
        dev) state='In Development' ;;
	todo) state='To-Do' ;;
        ice) state='Icebox' ;;
        done|completed) state='Completed' ;;
	*)
	    echo "invalid state: $mode expected one of ice|todo|dev|done"
            return 1
	    ;;
    esac
    short search --state "$state" \
          --owner "$shortcut_user" --format "$shortcut_user/sc-%id/%t" -q \
        | tr '[:upper:]' '[:lower:]' \
        | sed -E -e 's,(/[^/]+/[^/]+)/.*$,\1,' -e 's/ $//' -e 's/ /-/g' \
        | fzf --height 5
}

drun() {
    local usage="usage: drun IMAGE_NAME [COMMAND...]"
    if [[ $# -eq 0  ]]; then
        echo "$usage"
        return 1
    elif [[ "$*" =~ -h ]]; then
        echo -n "$usage

Run a docker image with the current directory mounted in the working dir
"
        return 0
    fi

    image_name=$1 && shift
    if [[ $# -gt 0 ]]; then
        command=("$@")
    else
        command=(bash)
    fi
    docker run -it --rm -v "$(pwd):/work" -w /work $image_name "${command[@]}"
}

# Vterm stuff, tells emacs which directory we're currently in
function vterm_printf() {
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
    # alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
    prompt_vterm_end() {
        vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
    }
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS+=vterm_end
fi

if [[ -f /usr/local/bin/lesspipe.sh ]]; then
    export LESSOPEN='|/usr/local/bin/lesspipe.sh %s' LESS_ADVANCED_PREPROCESSOR=1
elif [[ -f /opt/homebrew/bin/lesspipe.sh ]]; then
    export LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s" LESS_ADVANCED_PREPROCESSOR=1
fi

if [[ -d /opt/homebrew/opt/llvm ]]; then
    export LDFLAGS="-L/opt/homebrew/opt/llvm/lib $LDFLAGS"
    export CPPFLAGS="-I/opt/homebrew/opt/llvm/include $LDFLAGS"
fi

enable_nvm() {
  export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
}

# no idea where this is getting set
unset GOROOT
source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"
